<?php

function roparun_webform_webform_validation_validators() {
	$validators = array(
    'roparun_min_value' => array(
      'name' => t('Minimum value'),
      'component_types' => array(
        'hidden',
        'number',
        'textfield',
      ),
      'custom_error' => TRUE,
      'custom_data' => array(
        'label' => t('Specify the minimum amount'),
        'description' => '',
        'required' => FALSE,
      ),
      'description' => t('Verifies that user-entered values are numeric and greater than the value provided.'),
    ),
    'roparun_confirmation' => array(
      'name' => t('Equal values with custom error message'),
      'custom_error' => TRUE,
      'component_types' => array(
        'date',
        'email',
        'hidden',
        'number',
        'select',
        'textarea',
        'textfield',
        'time',
        'boolean',
      ),
      'min_components' => 2,
      'description' => t('Verifies that all specified components contain equal values. If all components are of type email, they will get case-insensitive comparison.'),
    ),
  );
	return $validators;
}

function roparun_webform_webform_validation_validate($validator_name, $items, $components, $rule) {
	switch ($validator_name) {
		case 'roparun_min_value':
			$min_value = (float) $rule['data'];
      foreach ($items as $key => $val) {
        // First check if the value is numeric.
        if (is_numeric($val)) {
          $val = (float) $val;
        }
        else {
        	$errors[$key] = _webform_validation_i18n_error_message($rule);
          continue;
        }

        if ($val < $min_value) {
           $errors[$key] = _webform_validation_i18n_error_message($rule);
				}
			}
			break;
		case 'roparun_confirmation':
			$first_entry_key = key($items);
      $first_entry = array_shift($items);
      foreach ($items as $key => $val) {
        if ($val !== $first_entry) {
          $errors[$key] = _webform_validation_i18n_error_message($rule);
        }
      }
      return $errors;
	}
	return $errors;
}

function roparun_webform_form_alter(&$form, &$form_state, $form_id) {
	if (strpos($form_id, 'webform_client_form_') !== FALSE && !empty($form['#node']->webform_civicrm)) {
		// Add a validation rule to convert contribution amount to a float.
		$form['#validate'][] = 'roparun_webform_validation';
  }
}

// Validate the input of the webform.
function roparun_webform_validation($form, &$form_state) {
	$form_state['input'] = _roparun_check_values_for_contribution_amount($form_state['input']);
	$form_state['values'] = _roparun_check_values_for_contribution_amount($form_state['values']);	
}

/**
 * Checks all the elements of the array for a contribution amount value key. 
 * If it exists it will parse the value to a floating point number.
 */
function _roparun_check_values_for_contribution_amount(&$values) {
	foreach($values as $key => $value) {
		if ($key == 'civicrm_1_contribution_1_contribution_total_amount') {
			$numberFormatter = new NumberFormatter( 'nl_NL', NumberFormatter::DECIMAL );
			$values[$key] = $numberFormatter->parse($value);	
		} elseif (is_array($value)) {
			$values[$key] = _roparun_check_values_for_contribution_amount($value);
		}
	}
	return $values;
}

/**
 * Implements hook_webform_component_info_alter().
 * 
 * Change the default implementation of the Contact component.
 */
 function roparun_webform_webform_component_info() {
 	return array(
    'roparun_team' => array(
      'label' => t('Team en Teamdeelnemer'),
      'description' => t('Laat een lijst van teams en teamdeelnemers zien. Deze worden dan weer gebruikt om de aangemaakte bijdrage aan het team/teamlid te koppelen'),
      'features' => array(
      	'csv' => FALSE,
        'required' => FALSE,
        'conditional' => FALSE,
        'group' => TRUE,
        'title_display' => FALSE,
        'title_inline' => FALSE,
        'description' => FALSE,
        'wrapper_classes' => FALSE,
      ),
      'file' => 'includes/roparun_team_component.inc',
    ),
  );
 }

 function roparun_webform_civicrm_post($op, $objectName, $id, &$objectRef) {
 	if ($objectName == 'Contribution' && $op == 'create') {
 		if (isset($_POST['form_id']) && strpos($_POST['form_id'], 'webform_client_form_')===0 && isset($_POST['submitted'])) {
 			$nid = str_replace('webform_client_form_', '', $_POST['form_id']);
			$node = node_load($nid);
			$team_form_key = _roparun_retrieve_team_form_key($node);
			if (!empty($team_form_key)) { 
 				$team = _roparun_retrieve_team($_POST['submitted'], $team_form_key);
				if (!empty($team)) {
					$config = roparun_webform_config::singleton();					
					CRM_Core_DAO::executeQuery("DELETE FROM `".$config->getDonatedTowardsCustomGroupTableName()."` WHERE entity_id = %1", array(1=>array($id, 'Integer')));
					$sql = "INSERT INTO `".$config->getDonatedTowardsCustomGroupTableName(). "`";
					$columns = 'entity_id';
					$params[1] = array($id, 'Integer');
		 			$roparun_team = $team['_roparun_team'];
					$columns .= ', `'.$config->getTowardsTeamCustomFieldColumnName().'`';
					$params[2] = array($roparun_team, 'Integer');
					if (isset($team['_roparun_team_member_'.$roparun_team]) && !empty($team['_roparun_team_member_'.$roparun_team])) {
						$roparun_team_member = $team['_roparun_team_member_'.$roparun_team];
						$columns .= ', `'.$config->getTowardsTeamMemberCustomFieldColumnName().'`';
						$params[3] = array($roparun_team_member, 'Integer');	
					}
					$sql .= ' ('.$columns.') VALUES (';
					foreach($params as $param_num => $param) {
						if ($param_num > 1) {
							$sql .= ', ';
						}
						$sql .= '%'.$param_num;
					}	  
					$sql .= ')';
					CRM_Core_DAO::executeQuery($sql, $params);
				}
			}
		}
	}
 }

function _roparun_retrieve_team_form_key($node) {
	foreach ($node->webform['components'] as $cid => $field) {
		if ($field['type'] == 'roparun_team') {
			return $field['form_key'];
		}
	}
	return false;
}
 
 function _roparun_retrieve_team($values, $element_key) {
 		if (isset($values[$element_key]) && isset($values[$element_key]['_roparun_team'])) {
 			return $values[$element_key];
 		}
		foreach($values as $key => $value) {
			if (is_array($value)) {
				$return = _roparun_retrieve_team($value, $element_key);
				if (!empty($return)) {
					return $return;
				}
			}
		}
		return false;
 }

function _roparun_load_teammembers($form, &$form_state) {
  return $form['_roparun_team_member'];
}

function roparun_webform_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
  	$group = $implementations['roparun_webform'];
		$new_implementations['roparun_webform'] = $group;
		foreach($implementations as $module => $group) {
			if ($module != 'roparun_webform') {
				$new_implementations[$module] = $group;
			}
		}
		$implementations = $new_implementations;
  }
}